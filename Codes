            string Time_start = DateTime.Now.ToString();
            axMapControl1.Update();
            axMapControl1.Refresh();

            //The path of data folder
            string folderPath = @"D:\Data\Sim1";

            DataMan pDM = new DataMan();
            #region Read the parameters of ANN
            Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();

            //The filePath of parameters w1, b1, w2 and b2 of ANN
            string filePath = folderPath + @"\PSO para.xlsx";
            Microsoft.Office.Interop.Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(filePath);
            Microsoft.Office.Interop.Excel.Worksheet xlWorksheet1 = xlWorkbook.Sheets[1];
            Microsoft.Office.Interop.Excel.Worksheet xlWorksheet2 = xlWorkbook.Sheets[2];
            Microsoft.Office.Interop.Excel.Worksheet xlWorksheet3 = xlWorkbook.Sheets[3];
            Microsoft.Office.Interop.Excel.Worksheet xlWorksheet4 = xlWorkbook.Sheets[4];

	     //Set num_1, num_2 and num_3 according to the structure of ANN
            double[,] w1 = new double[num_1, num_2];
            double[,] b1 = new double[num_1, num_3];
            double[,] w2 = new double[num_3, num_1];
            double b2 = 0.0;

            //Read the values of w1, b1, w2 and b2
            for (int i = 1; i <= num_1-1; i++)
            {
                for (int j = 1; j <= num_2-1; j++)
                {
                    w1[i, j] = xlWorksheet1.Cells[i, j].Value2;
                }
  b1[i, 1] = xlWorksheet2.Cells[i, 1].Value2;
                w2[1, i] = xlWorksheet3.Cells[1, i].Value2;
            }

            b2 = xlWorksheet4.Cells[1, 1].Value2;


            Marshal.ReleaseComObject((object)xlWorksheet1);
            xlWorkbook.Close();
            Marshal.ReleaseComObject(xlWorkbook);
            xlApp.Quit();
            Marshal.ReleaseComObject(xlApp);
            #endregion

            CalAttribute pCA = new CalAttribute();

            #region First iteration
            axMapControl1.AddShapeFile(folderPath, "Layer_Newresi.shp");
            axMapControl1.AddShapeFile(folderPath, "Layer_Candidate.shp");
            IFeatureLayer nonresiFeatureLayer = axMapControl1.get_Layer(0) as IFeatureLayer;
            ITable nonresiTable = nonresiFeatureLayer.FeatureClass as ITable;
            IFeatureLayer resiFeatureLayer = axMapControl1.get_Layer(1) as IFeatureLayer;

            //Calculate transfer probabilities
            pCA.Cal_Transfer6(nonresiTable, w1, b1, w2, b2, num_5);

            //Select records to be transferred
            pDM.SelectandModify_vector(nonresiTable, num_5, area_iteration, num_6);

            //Update Layer_Newresi and Layer_Candidate
            pDM.UpdateLayerOfCell_vector(nonresiFeatureLayer, resiFeatureLayer);

            axMapControl1.Update();
            axMapControl1.Refresh();
            axTOCControl1.Update();
            axTOCControl1.Refresh();
            axMapControl1.Extent = axMapControl1.FullExtent;

            IWorkspaceFactory pwf = new ShapefileWorkspaceFactory();           
            IWorkspaceFactoryLockControl ipWsFactoryLock = (IWorkspaceFactoryLockControl)pwf;
            if (ipWsFactoryLock.SchemaLockingEnabled)
            {
                ipWsFactoryLock.DisableSchemaLocking();
            }

            axMapControl1.ClearLayers();
            axMapControl1.Update();
            axMapControl1.Refresh();
            axTOCControl1.Update();
            axTOCControl1.Refresh();

            axMapControl1.AddShapeFile(folderPath, " Layer_Candidate.shp");

            //Update neighbourhood configuration
            string input_Features = folderPath + @"\ Layer_Newresi.shp.shp";
            string output_Features = folderPath + @"\ Layer_Oriresi.shp";
            pCA.Dissolve(input_Features, output_Features);

            axMapControl1.AddShapeFile(folderPath, " Layer_Newresi.shp ");
            axMapControl1.AddShapeFile(folderPath, " Layer_Oriresi.shp");
            axMapControl1.Update();
            axTOCControl1.Update();

            IFeatureLayer oriFeatureLayer = axMapControl1.get_Layer(2) as IFeatureLayer;
            IFeatureClass oriFeatureClass = oriFeatureLayer.FeatureClass;
            resiFeatureLayer = axMapControl1.get_Layer(1) as IFeatureLayer;
            IFeatureClass resiFeatureClass = resiFeatureLayer.FeatureClass;
            IFeatureLayer neiFeatureLayer = axMapControl1.get_Layer(0) as IFeatureLayer;
            IFeatureClass neiFeatureClass = neiFeatureLayer.FeatureClass;
            pCA.Cal_VectorNeighbors(oriFeatureClass, num_7, neiFeatureClass, 60);

            pCA.Mapminmax2(nonresiTable, num_7, "Neigh", num_8);

            //axMapControl1.ClearLayers();
            axMapControl1.Update();
            axMapControl1.Refresh();
            axTOCControl1.Update();
            axTOCControl1.Refresh();
            axMapControl1.ClearLayers();
            axMapControl1.Update();
            axMapControl1.Refresh();
            axTOCControl1.Update();
            axTOCControl1.Refresh();
            axMapControl1.Extent = axMapControl1.FullExtent;

            #endregion First iteration

            #region Remaining iterations
            for (int j = 0; j < num_9; j++)
            {
                if (ipWsFactoryLock.SchemaLockingEnabled)
                {
                    ipWsFactoryLock.DisableSchemaLocking();
                }

                //Read nonresi and resi layers
                axMapControl1.AddShapeFile(folderPath, "Layer_Newresi.shp");
                axMapControl1.AddShapeFile(folderPath, "Layer_Candidate.shp");
                nonresiFeatureLayer = axMapControl1.get_Layer(0) as IFeatureLayer;
                nonresiTable = nonresiFeatureLayer.FeatureClass as ITable;
                resiFeatureLayer = axMapControl1.get_Layer(1) as IFeatureLayer;

                //Calculate transfer probabilities
                pCA.Cal_Transfer6(nonresiTable, w1, b1, w2, b2, num_5);

                //Select records to be transferred
                pDM.SelectandModify_vector(nonresiTable, num_5, area_iteration, num_6);

                //Update Layer_Newresi and Layer_Candidate
                pDM.UpdateLayerOfCell_vector(nonresiFeatureLayer, resiFeatureLayer);

                IQueryFilter pQueryFilter = new QueryFilter();
                pQueryFilter.WhereClause = "Transfer=1";
                nonresiTable.DeleteSearchedRows(pQueryFilter);

                axMapControl1.Update();
                axMapControl1.Refresh();
                axTOCControl1.Update();
                axTOCControl1.Refresh();
                axMapControl1.Extent = axMapControl1.FullExtent;

                if (ipWsFactoryLock.SchemaLockingEnabled)
                {
                    ipWsFactoryLock.DisableSchemaLocking();
                }

                axMapControl1.ClearLayers();
                axMapControl1.Update();
                axMapControl1.Refresh();
                axTOCControl1.Update();
                axTOCControl1.Refresh();


                //Update neighbourhood configuration
                input_Features = folderPath + @"\Layer_Newresi.shp";
                output_Features = folderPath + @"\ Layer_Oriresi.shp";
                pCA.Dissolve(input_Features, output_Features);

                axMapControl1.AddShapeFile(folderPath, " Layer_Candidate.shp");
                axMapControl1.AddShapeFile(folderPath, " Layer_Newresi.shp");
                axMapControl1.AddShapeFile(folderPath, " Layer_Oriresi.shp");
                axMapControl1.Update();
                axMapControl1.Refresh();
                axTOCControl1.Update();
                axTOCControl1.Refresh();
                axMapControl1.Update();
                axTOCControl1.Update();

                oriFeatureLayer = axMapControl1.get_Layer(2) as IFeatureLayer;
                oriFeatureClass = oriFeatureLayer.FeatureClass;
                resiFeatureLayer = axMapControl1.get_Layer(1) as IFeatureLayer;
                resiFeatureClass = resiFeatureLayer.FeatureClass;
                neiFeatureLayer = axMapControl1.get_Layer(0) as IFeatureLayer;
                neiFeatureClass = neiFeatureLayer.FeatureClass;
                pCA.Cal_VectorNeighbors(oriFeatureClass, num_7, neiFeatureClass, 60);

                pCA.Mapminmax2(nonresiTable, num_7, "Neigh", num_8);

                //axMapControl1.ClearLayers();
                axMapControl1.Update();
                axMapControl1.Refresh();
                axTOCControl1.Update();
                axTOCControl1.Refresh();
                axMapControl1.ClearLayers();
                axMapControl1.Update();
                axMapControl1.Refresh();
                axTOCControl1.Update();
                axTOCControl1.Refresh();
                axMapControl1.Extent = axMapControl1.FullExtent;
            }
            #endregion Remaining iterations

            string Time_end = DateTime.Now.ToString();
            string txtPath2 = @"D:\Data\Sim1";
            System.IO.StreamWriter sw = new System.IO.StreamWriter(txtPath2, false, System.Text.Encoding.Default);
            sw.WriteLine("Start Time:" + Time_start + ", Finish Time:" + Time_end);
            sw.Flush();
            sw.Close();

            //Release
            Marshal.ReleaseComObject(xlWorksheet1);
            Marshal.ReleaseComObject(xlWorksheet2);
            Marshal.ReleaseComObject(xlWorksheet3);
            Marshal.ReleaseComObject(xlWorksheet4);
            Marshal.ReleaseComObject(xlWorkbook);
            xlApp.Quit();
            Marshal.ReleaseComObject(xlApp);
